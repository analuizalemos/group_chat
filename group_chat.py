# -*- coding: utf-8 -*-
"""group_chat

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hWxTt3R2ic3D7J0MsmvemOniPcGKyn_K
"""

import prettytable
import sqlite3

db = sqlite3.connect("sistema_mensagens.db")
cursor = db.cursor()
update = db.cursor()

# Função para criar tabela de mensagens se ela não existir
def criar_tabela_mensagens():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS mensagens (
            id INTEGER PRIMARY KEY,
            remetente TEXT NOT NULL,
            destinatario TEXT,
            mensagem TEXT,
            prioridade INTEGER DEFAULT 0,
            grupo TEXT,
            visualizado boolean,
            data_envio TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    db.commit()

# Chama a função para criar a tabela de mensagens
criar_tabela_mensagens()

# Função para enviar uma mensagem
def enviar_mensagem(remetente, destinatarios, mensagem, prioridade=0, grupo=None):
    if destinatarios:
        for destinatario in destinatarios:
            cursor.execute(
                "INSERT INTO mensagens (remetente, destinatario, mensagem, prioridade, grupo, visualizado) VALUES (?, ?, ?, ?, ?, ?)",
                (remetente, destinatario, mensagem, prioridade, grupo, 0))
    elif grupo:
        cursor.execute(
            "INSERT INTO mensagens (remetente, destinatario, mensagem, prioridade, grupo, visualizado) VALUES (?, ?, ?, ?, ?, ?)",
            (remetente, None, mensagem, prioridade, grupo, 0))
    db.commit()

# Funções para listar mensagens
def listar_mensagens_remetente(remetente):
    cursor.execute("SELECT destinatario, mensagem, prioridade, grupo, visualizado FROM mensagens WHERE remetente = ? ORDER BY prioridade DESC", (remetente,))
    mensagens = cursor.fetchall()
    return mensagens

def listar_mensagens_nao_lidas(destinatario):
    cursor.execute("SELECT remetente, mensagem, prioridade, grupo FROM mensagens WHERE destinatario = ? AND visualizado = 0 ORDER BY prioridade DESC", (destinatario,))
    mensagens = cursor.fetchall()
    return mensagens

def listar_mensagens_destinatario(destinatario):
    cursor.execute("SELECT remetente, mensagem, prioridade, grupo, visualizado FROM mensagens WHERE destinatario = ? ORDER BY prioridade DESC", (destinatario,))
    mensagens = cursor.fetchall()
    return mensagens

def listar_mensagens_grupo(grupo):
    cursor.execute("SELECT remetente, mensagem, destinatario, prioridade, visualizado FROM mensagens WHERE grupo = ? ORDER BY prioridade DESC", (grupo,))
    mensagens = cursor.fetchall()
    return mensagens

# Função para verificar se todas as mensagens foram lidas
def verifica_mensagens_nao_lidas(destinatario, remetente):
    cursor.execute("SELECT visualizado from mensagens WHERE destinatario = ? AND remetente = ? AND visualizado = 0", (remetente, destinatario,))
    mensagem = cursor.fetchone()
    if mensagem is None:
        return False
    else:
        return True

# Exemplo de uso
if __name__ == "__main__":
    while True:
        print("\n1. Enviar Mensagem")
        print("2. Ler Mensagem")
        print("3. Listar Mensagens do Remetente/Destinatário")
        print("4. Listar todas as mensagens do banco")
        print("5. Sair")
        escolha = input("Escolha uma opção: ")

        if escolha == "1":
            remetente = input("\nRemetente: ")
            destinatarios = input("Destinatario (deixe em branco se for uma mensagem de grupo): ").split(',')

            for destinatario in destinatarios:
                if verifica_mensagens_nao_lidas(destinatario, remetente):
                    print('\nExistem mensagens que ainda não foram lidas nesta conversa')
                    print('Verifique as mensagens recebidas antes de gerar novas mensagens')
                    break
                else:
                    mensagem = input("Mensagem: ")
                    prioridade = int(input("Prioridade (0 para padrão, 1 para média e 2 para alta): "))
                    grupo = input("Grupo (deixe em branco se NÃO for uma mensagem de grupo): ")

                    if grupo:
                        enviar_mensagem(remetente, None, mensagem, prioridade, grupo)
                        print(f"\nMensagem enviada com sucesso para o grupo {grupo}!")
                    else:
                        enviar_mensagem(remetente, destinatarios, mensagem, prioridade)
                        print("\nMensagem enviada com sucesso!")

        elif escolha == "2":
            destinatario = input("Destinatário das mensagens: ")
            mensagens = listar_mensagens_nao_lidas(destinatario)

            if mensagens:
                print("\nMensagens não lidas de", destinatario)
                table = prettytable.PrettyTable(["Remetente", "Mensagem", "Prioridade", "Grupo"])
                for mensagem in mensagens:
                    remetente, mensagem, prioridade, grupo = mensagem
                    table.add_row([remetente, mensagem, prioridade, grupo])
                print(table)
                update.execute("UPDATE mensagens set visualizado = 1 WHERE destinatario = ? AND visualizado = 0", [destinatario])
            else:
                print("\nNenhuma mensagem não lida encontrada de ", destinatario)

        elif escolha == "3":
            print(f"\n'R' para consultar remetente"
                  f"\n'D' para consultar destinatário"
                  f"\n'G' para consultar grupo")
            opcao = input("Escolha uma opção: ").upper()

            if opcao == 'R':
                remetente = input("Remetente: ")
                mensagens = listar_mensagens_remetente(remetente)

                if mensagens:
                    print("Mensagens de ", remetente)
                    update.execute("UPDATE mensagens set visualizado = 1 WHERE remetente = ? AND visualizado = 0", [remetente])
                    table = prettytable.PrettyTable(["Destinatario", "Mensagem", "Prioridade", "Grupo", 'visualizado'])
                    for mensagem in mensagens:
                        destinatario, mensagem, prioridade, grupo, visualizado = mensagem
                        table.add_row([destinatario, mensagem, prioridade, grupo, visualizado])
                    print(table)
                else:
                    print("Nenhuma mensagem encontrada de", remetente)

            elif opcao == 'D':
                destinatario = input("\nDestinatario: ")
                mensagens = listar_mensagens_destinatario(destinatario)

                if mensagens:
                    print("\nMensagens para", destinatario, "\n")
                    table = prettytable.PrettyTable(["Remetente", "Mensagem", "Prioridade", "Grupo", 'visualizado'])
                    for mensagem in mensagens:
                        remetente, mensagem, prioridade, grupo, visualizado = mensagem
                        table.add_row([remetente, mensagem, prioridade, grupo, visualizado])
                    print(table)
                else:
                    print("\nNenhuma mensagem encontrada para", destinatario)

            elif opcao == 'G':
                grupo = input("\nGrupo: ")
                mensagens = listar_mensagens_grupo(grupo)

                if mensagens:
                    print(f"\nMensagens para o grupo {grupo}\n")
                    for mensagem in mensagens:
                        remetente, mensagem, destinatario, prioridade, visualizado = mensagem
                        table.add_row([remetente, mensagem, prioridade, destinatario, visualizado])
                    print(table)
                else:
                    print(f"\nNenhuma mensagem encontrada para o grupo {grupo}")

            else:
                print("Selecione uma opção válida!")

        elif escolha == "4":
            cursor.execute("SELECT remetente, destinatario, mensagem, prioridade, grupo, visualizado, data_envio FROM mensagens ORDER BY prioridade DESC")
            mensagens = cursor.fetchall()

            if mensagens:
                print(f"\nTodas as Mensagens Ordenadas por Prioridade\n")
                table = prettytable.PrettyTable(["Remetente", "Destinatario", "Mensagem", "Prioridade", "Grupo", "visualizado", "Data Envio"])
                for mensagem in mensagens:
                    remetente, destinatario, mensagem, prioridade, grupo, visualizado, data_envio = mensagem
                    table.add_row([remetente, destinatario, mensagem, prioridade, grupo, visualizado, data_envio])
                print(table)
            else:
                print("\nNenhuma mensagem encontrada no banco de dados")

        elif escolha == "5":
            break

cursor.close()
update.close()
db.close()